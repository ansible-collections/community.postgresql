#
# Test settings privileges for foreign tables
#
- name: Create db
  become_user: "{{ pg_user }}"
  become: true
  postgresql_db:
    name: "{{ db_name }}"
    state: "present"
    login_user: "{{ pg_user }}"

- name: Create some tables on the db
  become_user: "{{ pg_user }}"
  become: true
  shell: echo "create table test_table1 (field text);" | psql {{ db_name }}

- vars:
    db_password: 'secret√π' # use UTF-8
  block:
    - name: Create a user with some permissions on the db
      become_user: "{{ pg_user }}"
      become: true
      postgresql_user:
        name: "{{ db_user1 }}"
        encrypted: 'true'
        password: "md5{{ (db_password ~ db_user1) | hash('md5')}}"
        db: "{{ db_name }}"
        login_user: "{{ pg_user }}"

- name: Install foreign data wrapper extension
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    login_db: "{{ db_name }}"
    query: "CREATE EXTENSION IF NOT EXISTS postgres_fdw"

- name: Create foreign server
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    login_db: "{{ db_name }}"
    query: "CREATE SERVER IF NOT EXISTS self FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'localhost',dbname '{{ db_name }}')"

- name: Create user mapping
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    login_db: "{{ db_name }}"
    query: "CREATE USER MAPPING IF NOT EXISTS FOR CURRENT_USER SERVER self OPTIONS (user '{{ pg_user }}')"

- name: Create foreign table
  become: yes
  become_user: "{{ pg_user }}"
  postgresql_query:
    login_db: "{{ db_name }}"
    query: "CREATE FOREIGN TABLE IF NOT EXISTS foreign_table1 (field text) SERVER self OPTIONS (table_name 'test_table1')"

- name: Grant a single privilege on foreign table
  become_user: "{{ pg_user }}"
  become: true
  postgresql_privs:
    state: "present"
    roles: "{{ db_user1 }}"
    privs: "INSERT"
    objs: "foreign_table1"
    login_db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    trust_input: false

- name: Check that permissions were added (foreign_table1)
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_db: '{{ db_name }}'
    query: "select privilege_type from information_schema.role_table_grants where grantee='{{ db_user1 }}' and table_name='foreign_table1'"
  register: result_table1

- assert:
    that:
      - result_table1.rowcount == 1
      - result_table1.query_result[0]['privilege_type'] == 'INSERT'

- name: Revoke privileges on foreign table
  become_user: "{{ pg_user }}"
  become: true
  postgresql_privs:
    state: "absent"
    roles: "{{ db_user1 }}"
    privs: "INSERT"
    objs: "foreign_table1"
    db: "{{ db_name }}"
    login_user: "{{ pg_user }}"
    trust_input: false
  register: result

- name: Check that ansible reports it changed the user
  assert:
    that:
      - result is changed

- name: Check that permissions were revoked (foreign_table1)
  become_user: "{{ pg_user }}"
  become: true
  postgresql_query:
    login_db: '{{ db_name }}'
    query: "select privilege_type from information_schema.role_table_grants where grantee='{{ db_user1 }}' and table_name='foreign_table1'"
  register: result_table1

- assert:
    that:
      - result_table1.rowcount == 0
