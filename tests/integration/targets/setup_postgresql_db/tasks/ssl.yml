- name: postgresql SSL - create database
  become_user: '{{ pg_user }}'
  become: true
  postgresql_db:
    name: '{{ ssl_db }}'

- name: postgresql SSL - create role
  become_user: '{{ pg_user }}'
  become: true
  postgresql_user:
    name: '{{ ssl_user }}'
    role_attr_flags: SUPERUSER
    password: '{{ ssl_pass }}'

- name: postgresql SSL - install openssl
  become: true
  package: name=openssl state=present

- name: postgresql SSL - create certs 1 (Make a self-signed server CA)
  become_user: root
  become: true
  shell: openssl req -sha256 -new -x509 -days 365 -nodes -out /tmp/server-ca.crt -keyout /tmp/server-ca.key -subj "/CN="

- name: postgresql SSL - create certs 2 (Generate server CSR)
  become_user: root
  become: true
  shell: openssl req -sha256 -new -nodes -subj "/CN=127.0.0.1" -out /tmp/server.csr -keyout /tmp/server.key

- name: postgresql SSL - create certs 3 (Sign a server certificate)
  become_user: root
  become: true
  shell: openssl x509 -req -sha256 -days 365 -in /tmp/server.csr -CA /tmp/server-ca.crt -CAkey /tmp/server-ca.key -CAcreateserial -out /tmp/server.crt

- name: postgresql SSL - create certs 4 (Make a self-signed client CA)
  become_user: root
  become: true
  shell: openssl req -sha256 -new -x509 -days 365 -nodes -out /tmp/client-ca.crt -keyout /tmp/client-ca.key -subj "/CN="

- name: postgresql SSL - create certs 5 (Generate client CSR)
  become_user: root
  become: true
  shell: openssl req -sha256 -new -nodes -subj "/CN={{ ssl_user }}" -out /tmp/client.csr -keyout /tmp/client.key

- name: postgresql SSL - create certs 6 (Sign a client certificate)
  become_user: root
  become: true
  shell: openssl x509 -req -sha256 -days 365 -in /tmp/client.csr -CA /tmp/client-ca.crt -CAkey /tmp/client-ca.key -CAcreateserial -out /tmp/client.crt

- name: postgresql SSL - set right permissions to files
  become_user: root
  become: true
  file:
    path: '{{ item }}'
    mode: '0600'
    owner: '{{ pg_user }}'
    group: '{{ pg_user }}'
  with_items:
  - /tmp/server.key
  - /tmp/server.crt
  - /tmp/server.csr
  - /tmp/client.csr
  - /tmp/client.key
  - /tmp/client-ca.crt
  - /tmp/client-ca.key
  - /tmp/server-ca.key
  - /tmp/server-ca.crt

- name: postgresql SSL - enable SSL
  become_user: '{{ pg_user }}'
  become: true
  postgresql_set:
    login_user: '{{ pg_user }}'
    db: postgres
    name: ssl
    value: true

- name: postgresql SSL - add ssl_cert_file
  become_user: '{{ pg_user }}'
  become: true
  postgresql_set:
    login_user: '{{ pg_user }}'
    db: postgres
    name: ssl_cert_file
    value: /tmp/server.crt

- name: postgresql SSL - add ssl_key_file
  become_user: '{{ pg_user }}'
  become: true
  postgresql_set:
    login_user: '{{ pg_user }}'
    db: postgres
    name: ssl_key_file
    value: /tmp/server.key

- name: postgresql SSL - add ssl_ca_file
  become_user: '{{ pg_user }}'
  become: true
  postgresql_set:
    login_user: '{{ pg_user }}'
    db: postgres
    name: ssl_ca_file
    value: /tmp/client-ca.crt

- name: postgresql SSL - reload PostgreSQL to enable ssl on
  become: true
  service:
    name: '{{ postgresql_service }}'
    state: reloaded
