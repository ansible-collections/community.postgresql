####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################

- name: python 2
  set_fact:
    python_suffix: ''
  when: ansible_python_version is version('3', '<')

- name: python 3
  set_fact:
    python_suffix: -py3
  when: ansible_python_version is version('3', '>=')

- name: Include distribution and Python version specific variables
  include_vars: '{{ lookup(''first_found'', params) }}'
  vars:
    params:
      files:
      - '{{ ansible_distribution }}-{{ ansible_distribution_major_version }}{{ python_suffix }}.yml'
      - '{{ ansible_distribution }}-{{ ansible_distribution_version }}{{ python_suffix }}.yml'
      - '{{ ansible_os_family }}{{ python_suffix }}.yml'
      - default{{ python_suffix }}.yml
      paths:
      - '{{ role_path }}/vars'

- block:
    - name: Make sure the dbus service is enabled under systemd
      shell: systemctl enable dbus || systemctl enable dbus-broker
      ignore_errors: yes
    - name: Make sure the dbus service is started under systemd
      systemd:
        name: dbus
        state: started
  when: ansible_service_mgr == 'systemd' and ansible_distribution == 'Fedora'

- name: Kill all postgres processes
  shell: 'pkill -u {{ pg_user }}'
  become: yes
  when: ansible_facts.distribution == 'CentOS' and ansible_facts.distribution_major_version == '8'
  ignore_errors: yes

- name: stop postgresql service
  service: name={{ postgresql_service }} state=stopped
  ignore_errors: true

- name: remove old db config and files
  file:
    path: '{{ loop_item }}'
    state: absent
  ignore_errors: true
  loop:
  - /etc/postgresql
  - /var/lib/postgresql
  loop_control:
    loop_var: loop_item

#
## Install PGDG repo on Ubuntu
- block:
    - name: Install wget
      package:
        name: wget
    - name: Add a repository
      shell: echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list
    - name: Add a repository
      shell: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    - name: Add a repository
      shell: apt -y update
    - name: Install locale needed
      shell: 'locale-gen {{ item }}'
      loop:
      - es_ES
      - pt_BR
    - name: Update locale
      shell: 'update-locale'
  when: ansible_facts.distribution == 'Ubuntu'
##
#

#
## Install PGDG repo on RedHat family
- name: Add a repository
  shell: 'yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ansible_facts.distribution_major_version}}-x86_64/pgdg-redhat-repo-latest.noarch.rpm'
  when: ansible_facts.os_family == 'RedHat'

##
#

- include_tasks: install_deps.yml
  with_sequence: start=10 count=5
  loop_control:
    loop_var: pg_ver

- name: Initialize postgres (RedHat systemd)
  command: 'postgresql-{{ pg_ver }}-setup initdb'
  when:
    - ansible_service_mgr == "systemd"
    - ansible_os_family == "RedHat"
  with_sequence: start=10 count=5
  loop_control:
    loop_var: pg_ver

- name: Initialize postgres (Debian)
  shell: . /usr/share/postgresql-common/maintscripts-functions && set_system_locale && /usr/bin/pg_createcluster -u postgres {{ pg_verÂ }} main
  args:
    creates: /etc/postgresql/{{ pg_ver }}/
  when: ansible_os_family == 'Debian'

- name: Copy pg_hba into place
  template:
    src: files/pg_hba.conf
    dest: '{{ pg_hba_location }}'
    owner: '{{ pg_user }}'
    group: '{{ pg_group }}'
    mode: '0644'
  with_sequence: start=10 count=5
  loop_control:
    loop_var: pg_ver

- name: Generate locales (Debian)
  locale_gen:
    name: '{{ item }}'
    state: present
  with_items:
  - pt_BR
  - es_ES
  when: ansible_os_family == 'Debian'

- block:
  - name: Install langpacks (RHEL8)
    yum:
      name:
      - glibc-langpack-es
      - glibc-langpack-pt
      - glibc-all-langpacks
      state: present
    when: ansible_distribution_major_version is version('8', '>=')
  - name: Check if locales need to be generated (RedHat)
    shell: localedef --list-archive | grep -a -q '^{{ locale }}$'
    register: locale_present
    ignore_errors: true
    with_items:
    - es_ES
    - pt_BR
    loop_control:
      loop_var: locale
  - block:
      - name: Reinstall internationalization files
        command: yum -y reinstall glibc-common
    rescue:
      - name: Install internationalization files
        yum:
          name: glibc-common
          state: present
    when: locale_present is failed
  - name: Generate locale (RedHat)
    command: localedef -f ISO-8859-1 -i {{ item.locale }} {{ item.locale }}
    when: item is failed
    with_items: '{{ locale_present.results }}'
  when: ansible_os_family == 'RedHat' and ansible_distribution != 'Fedora'

- name: Install glibc langpacks (Fedora >= 24)
  package:
    name: '{{ item }}'
    state: latest
  with_items:
  - glibc-langpack-es
  - glibc-langpack-pt
  when: ansible_distribution == 'Fedora' and ansible_distribution_major_version is version('24', '>=')

- name: Correct the port
  lineinfile:
    path: '{{pg_dir}}/postgresql.conf'
    regexp: '^port '
    insertafter: '^#port '
    line: 'port = 54{{ pg_ver }}'
  with_sequence: start=10 count=5
  loop_control:
    loop_var: pg_ver

- name: start postgresql service (RedHat)
  become_user: '{{ pg_user }}'
  become: true
  command: '/usr/pgsql-{{ pg_ver }}/bin/pg_ctl -D {{pg_dir}} start'
  with_sequence: start=10 count=5
  when: ansible_facts.os_family == 'RedHat'
  loop_control:
    loop_var: pg_ver

- name: start postgresql service (Debian)
  become_user: '{{ pg_user }}'
  become: true
  command: '/usr/lib/postgresql/{{ pg_ver }}/bin/pg_ctl -D {{pg_dir}} start'
  with_sequence: start=10 count=5
  when: ansible_facts.os_family == 'Debian'
  loop_control:
    loop_var: pg_ver

- name: Pause between start and stop
  pause:
    seconds: 5

- name: stop postgresql service (RedHat)
  become_user: '{{ pg_user }}'
  become: true
  command: '/usr/pgsql-{{ pg_ver }}/bin/pg_ctl -D {{pg_dir}} stop'
  with_sequence: start=10 count=5
  when: ansible_facts.os_family == 'RedHat'
  loop_control:
    loop_var: pg_ver

- name: stop postgresql service (Debian)
  become_user: '{{ pg_user }}'
  become: true
  command: '/usr/lib/postgresql/{{ pg_ver }}/bin/pg_ctl -D {{pg_dir}} stop'
  with_sequence: start=10 count=5
  when: ansible_facts.os_family == 'Debian'
  loop_control:
    loop_var: pg_ver

- name: Pause between stop and start
  pause:
    seconds: 5

- name: start postgresql service (RedHat)
  become_user: '{{ pg_user }}'
  become: true
  command: '/usr/pgsql-{{ pg_ver }}/bin/pg_ctl -D {{pg_dir}} start'
  with_sequence: start=10 count=5
  when: ansible_facts.os_family == 'RedHat'
  loop_control:
    loop_var: pg_ver

- name: start postgresql service (Debian)
  become_user: '{{ pg_user }}'
  become: true
  command: '/usr/lib/postgresql/{{ pg_ver }}/bin/pg_ctl -D {{pg_dir}} start'
  with_sequence: start=10 count=5
  when: ansible_facts.os_family == 'Debian'
  loop_control:
    loop_var: pg_ver

- name: set up dummy extension (Debian)
  include_tasks: dummy_ext.yml
  with_sequence: start=10 count=5
  loop_control:
    loop_var: pg_ver
  when: ansible_os_family == 'Debian'

- import_tasks: ssl.yml
  when:
  - ansible_os_family == 'Debian'
